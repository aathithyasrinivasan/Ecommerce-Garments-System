// const { createSlice } = require("@reduxjs/toolkit");
import { createSlice } from "@reduxjs/toolkit";

const productSlice =createSlice({
    name:"product",
    initialState:{
        loading:false,
        message:{},
        product:{},
        error:{},
        isProductCreated:false,
        isProductDeleted:false,
        isProductUpdated:false
    },
    reducers:{
        productRequest(state,action){
            return{
                loading:true,
                product:{},
                message:{}
            }
        },
        productSuccess(state,action){
            return{
                loading:false,
                message:{},
                product:action.payload.product
            }
        },
        productFail(state,action){
            return{
                loading:false,
                error:action.payload.message
            }
        },
        newproductRequest(state,action){
            return{
                loading:true,
                product:{},
                error:{}
            }
        },
        newproductSuccess(state,action){
            return{
                loading:false,
                product:action.payload.product,
                isProductCreated:true
            }
        },
        newproductFail(state,action){
            return{
                loading:false,
                error:action.payload,
                isProductCreated:false
            }
        },
        clearError(state,action){
            return{
                ...state,
                error:{}
            }
        },
        clearnewProduct(state,action){
            return{
                ...state,
                isProductCreated:false
            }
        },
        updateproductRequest(state,action){
            return{
                ...state,
                loading:true,
            }
        },
        updateproductSuccess(state,action){
            return{
                ...state,
                loading:false,
                product:action.payload.product,
                isProductUpdated:true
            }
        },
        updateproductFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload,
                isProductCreated:false
            }
        },
     
        clearProductUpdated(state,action){
            return{
                ...state,
                isProductUpdated:false
            }
        },

        deleteproductRequest(state,action){
            return{
                loading:true,
                product:{},
                error:{}
            }
        },
        deleteproductSuccess(state,action){
            return{
                ...state,
                loading:false,
                isProductDeleted:true
            }
        },
        deleteproductFail(state,action){
            return{
                loading:false,
                error:action.payload,
                isProductDeleted:false
            }
        },
        cleardeleteProduct(state,action){
            return{
                ...state,
                isProductDeleted:false
            }
        }
    }
})
const {actions,reducer}=productSlice;

export const {productRequest,productSuccess,productFail,newproductFail,newproductRequest,clearError,
              newproductSuccess,clearnewProduct,deleteproductFail,deleteproductRequest,deleteproductSuccess,cleardeleteProduct,
              updateproductFail,updateproductRequest,updateproductSuccess,clearProductUpdated}=actions;
export default reducer;